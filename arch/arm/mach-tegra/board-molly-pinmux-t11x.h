/*
 * arch/arm/mach-tegra/board-molly-pinmux-t11x.h
 *
 * Copyright (c) 2012, NVIDIA Corporation.
 * Copyright (c) 2013, Google, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth floor, Boston, MA  02110-1301, USA
 */

#define MOLLY_ON_DALMORE 1

static __initdata struct tegra_pingroup_config molly_pinmux_common[] = {

	/* I2C3 pinmux */
	I2C_PINMUX(CAM_I2C_SCL, I2C3, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),
	I2C_PINMUX(CAM_I2C_SDA, I2C3, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),

	/* I2C2 pinmux */
	I2C_PINMUX(GEN2_I2C_SCL, I2C2, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),
	I2C_PINMUX(GEN2_I2C_SDA, I2C2, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),

	/* UARTD pinmux */
	DEFAULT_PINMUX(GMI_A16,       UARTD,       NORMAL,    NORMAL,   OUTPUT),
	DEFAULT_PINMUX(GMI_A17,       UARTD,       NORMAL,    TRISTATE, INPUT),
	DEFAULT_PINMUX(GMI_A18,       UARTD,       NORMAL,    TRISTATE, INPUT),
	DEFAULT_PINMUX(GMI_A19,       UARTD,       NORMAL,    NORMAL,   OUTPUT),

	/* SOC pinmux */
	DEFAULT_PINMUX(GMI_CS1_N, SOC, PULL_UP, TRISTATE, INPUT),/* OC_CRIT_N */
	DEFAULT_PINMUX(CLK_32K_OUT,   SOC,         NORMAL,    TRISTATE, INPUT),
	GPIO_PINMUX(GMI_IORDY, PULL_UP, NORMAL, INPUT, DISABLE), /* OC_WARN_N */

	/* SDMMC1 pinmux */
	DEFAULT_PINMUX(SDMMC1_CLK,    SDMMC1,      NORMAL,    NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC1_CMD,    SDMMC1,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC1_DAT0,   SDMMC1,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC1_DAT1,   SDMMC1,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC1_DAT2,   SDMMC1,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC1_DAT3,   SDMMC1,      PULL_UP,   NORMAL,   INPUT),

	/* SPI3 pinmux, for ubik */
	DEFAULT_PINMUX(SDMMC3_CLK,    SPI3,        NORMAL,    NORMAL,   OUTPUT),
	DEFAULT_PINMUX(SDMMC3_DAT0,   SPI3,        NORMAL,    NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC3_DAT1,   SPI3,        NORMAL,    NORMAL,   OUTPUT),
	/* GPIO pinmux, for ubik */
	GPIO_PINMUX(SDMMC3_CMD, NORMAL, NORMAL, OUTPUT, DISABLE), /* CS */
	GPIO_PINMUX(SDMMC3_DAT2, NORMAL, NORMAL, OUTPUT, DISABLE), /* RESET_N */
	GPIO_PINMUX(SDMMC3_DAT3, PULL_UP, NORMAL, INPUT, DISABLE), /* INT_N */

	/* SDMMC4 pinmux */
	DEFAULT_PINMUX(SDMMC4_CLK,    SDMMC4,      NORMAL,    NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_CMD,    SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT0,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT1,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT2,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT3,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT4,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT5,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT6,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),
	DEFAULT_PINMUX(SDMMC4_DAT7,   SDMMC4,      PULL_UP,   NORMAL,   INPUT),

	/* SPI2 (SWD) pinmux */
	DEFAULT_PINMUX(KB_COL0,       SPI2,        NORMAL,    NORMAL,   OUTPUT),
	DEFAULT_PINMUX(KB_COL1,       SPI2,        NORMAL,    NORMAL,   INPUT),
	DEFAULT_PINMUX(KB_ROW5,       SPI2,        NORMAL,    NORMAL,   OUTPUT),

	/* I2CPWR pinmux */
	I2C_PINMUX(PWR_I2C_SCL, I2CPWR, NORMAL, NORMAL,
		   INPUT, DISABLE, DISABLE),
	I2C_PINMUX(PWR_I2C_SDA, I2CPWR, NORMAL, NORMAL,
		   INPUT, DISABLE, DISABLE),

	/* CLK pinmux */
	DEFAULT_PINMUX(CLK_32K_IN,    CLK,         NORMAL,    TRISTATE, INPUT),

	/* PWRON pinmux */
	DEFAULT_PINMUX(CORE_PWR_REQ,  PWRON,       NORMAL,    NORMAL,   OUTPUT),

	/* CPU pinmux */
	DEFAULT_PINMUX(CPU_PWR_REQ,   CPU,         NORMAL,    NORMAL,   OUTPUT),

	/* PMI pinmux */
	DEFAULT_PINMUX(PWR_INT_N,     PMI,         NORMAL,    TRISTATE, INPUT),

	/* RESET_OUT_N pinmux */
	DEFAULT_PINMUX(RESET_OUT_N,   RESET_OUT_N, NORMAL,    NORMAL,   OUTPUT),

	/* I2C1 pinmux */
	I2C_PINMUX(GEN1_I2C_SCL, I2C1, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),
	I2C_PINMUX(GEN1_I2C_SDA, I2C1, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),

	/* UARTC pinmux */
	DEFAULT_PINMUX(UART3_CTS_N,   UARTC,       NORMAL,    TRISTATE, INPUT),
	DEFAULT_PINMUX(UART3_RTS_N,   UARTC,       NORMAL,    NORMAL,   OUTPUT),
	DEFAULT_PINMUX(UART3_RXD,     UARTC,       NORMAL,    TRISTATE, INPUT),
	DEFAULT_PINMUX(UART3_TXD,     UARTC,       NORMAL,    NORMAL,   OUTPUT),

	/* CEC pinmux */
	CEC_PINMUX(HDMI_CEC, CEC, NORMAL, NORMAL, INPUT, DISABLE, DISABLE),

	/* I2C4 pinmux */
	DDC_PINMUX(DDC_SCL, I2C4, NORMAL, NORMAL, INPUT, DISABLE, NORMAL),
	DDC_PINMUX(DDC_SDA, I2C4, NORMAL, NORMAL, INPUT, DISABLE, NORMAL),

	/* USB pinmux */
	DEFAULT_PINMUX(USB_VBUS_EN0,  USB,         PULL_DOWN, NORMAL,   OUTPUT),

	/* GPIO pinmux */
	/* LED_EN */
	GPIO_PINMUX(GMI_AD10, PULL_DOWN, NORMAL, OUTPUT, DISABLE),
	/* LED_TRIG_N */
	GPIO_PINMUX(GMI_AD11, PULL_UP, NORMAL, OUTPUT, DISABLE),
	/* STD_TEMP_ALERT */
	GPIO_PINMUX(GMI_CS0_N, NORMAL, NORMAL, INPUT, DISABLE),
	/* LED_INT_N* */
	GPIO_PINMUX(GMI_CS4_N, PULL_DOWN, NORMAL, INPUT, DISABLE),
	/* USB_PWR_FLT_N */
	GPIO_PINMUX(GMI_WP_N, PULL_UP, NORMAL, INPUT, DISABLE),
	/* WL_BT_RST_N */
	GPIO_PINMUX(CLK2_OUT, NORMAL, NORMAL, OUTPUT, DISABLE),
	/* WLAN_EN */
	GPIO_PINMUX(CLK2_REQ, NORMAL, NORMAL, OUTPUT, DISABLE),
	/* ENET_PHY_INT_N_3V3 */
	GPIO_PINMUX(SDMMC3_CLK_LB_OUT, PULL_UP, NORMAL, INPUT, DISABLE),
	/* ENET_RESET_N_3V3 */
	GPIO_PINMUX(SDMMC3_CLK_LB_IN, NORMAL, NORMAL, OUTPUT, DISABLE),
	/* BOARD_ID0 */
	GPIO_PINMUX(KB_COL3, PULL_UP, NORMAL, INPUT, DISABLE),
	/* BOARD_ID1 */
	GPIO_PINMUX(KB_COL4, PULL_UP, NORMAL, INPUT, DISABLE),
	/* UI_SWITCH */
	GPIO_PINMUX(KB_COL5, PULL_UP, NORMAL, INPUT, DISABLE),
	/* BOARD_ID2 */
	GPIO_PINMUX(KB_COL6, PULL_UP, NORMAL, INPUT, DISABLE),
	/* BOARD_ID3 */
	GPIO_PINMUX(KB_COL7, PULL_UP, NORMAL, INPUT, DISABLE),
	/* BT_WL_2HOST */
	GPIO_PINMUX(CLK3_REQ, PULL_UP, NORMAL, INPUT, DISABLE),
	/* WLAN_IRQ_N */
	GPIO_PINMUX(GPIO_PU5, PULL_UP, NORMAL, INPUT, DISABLE),
	/* BT_WL_GPIO19 */
	GPIO_PINMUX(GPIO_PU6, PULL_UP, NORMAL, OUTPUT, DISABLE),
	/* BT_WL_LED */
	GPIO_PINMUX(UART2_CTS_N, NORMAL, NORMAL, INPUT, DISABLE),
	/* BT_WL_OSC_SLP */
	GPIO_PINMUX(UART2_RTS_N, NORMAL, NORMAL, OUTPUT, DISABLE),
	/* HDMI_HPD */
	GPIO_PINMUX(HDMI_INT, PULL_DOWN, NORMAL, INPUT, DISABLE),
	/* HDMI_EN */
	GPIO_PINMUX(SPDIF_IN, NORMAL, NORMAL, OUTPUT, DISABLE),

#if MOLLY_ON_DALMORE == 1
	/* on dalmore, this is TEMP_ALERT for nct */
	DEFAULT_PINMUX(GPIO_X6_AUD,   SPI6,        PULL_UP,   TRISTATE, INPUT),

	/* on dalmore, this is our UI_SWITCH */
	DEFAULT_PINMUX(KB_ROW2, KBC, PULL_UP, NORMAL, INPUT),
#endif

};

static __initdata struct tegra_pingroup_config unused_pins_lowpower[] = {
	UNUSED_PINMUX(CLK1_OUT),
	UNUSED_PINMUX(CLK1_REQ),
	UNUSED_PINMUX(DAP1_DIN),
	UNUSED_PINMUX(DAP1_DOUT),
	UNUSED_PINMUX(DAP1_FS),
	UNUSED_PINMUX(DAP1_SCLK),
	UNUSED_PINMUX(DAP2_DIN),
	UNUSED_PINMUX(DAP2_DOUT),
	UNUSED_PINMUX(DAP2_FS),
	UNUSED_PINMUX(DAP2_SCLK),
	UNUSED_PINMUX(GPIO_X4_AUD),
	UNUSED_PINMUX(GPIO_X5_AUD),
#if MOLLY_ON_DALMORE == 0
	/* Needed on Dalmore for TEMP_ALERT
	 * This is on different pin for real molly
	 */
	UNUSED_PINMUX(GPIO_X6_AUD),
	/* Needed on Dalmore for WLAN_RESET_N
	 * This is on different pin for real molly
	 */
	UNUSED_PINMUX(GPIO_X7_AUD),
#endif
	UNUSED_PINMUX(GPIO_W2_AUD),
	UNUSED_PINMUX(GPIO_W3_AUD),
	UNUSED_PINMUX(DVFS_PWM),
	UNUSED_PINMUX(GPIO_X1_AUD),
	UNUSED_PINMUX(DVFS_CLK),
	UNUSED_PINMUX(GPIO_X3_AUD),
	UNUSED_PINMUX(DAP3_DIN),
	UNUSED_PINMUX(DAP3_DOUT),
	UNUSED_PINMUX(DAP3_FS),
	UNUSED_PINMUX(DAP3_SCLK),
	UNUSED_PINMUX(GPIO_PV0),
	UNUSED_PINMUX(GPIO_PV1),
	UNUSED_PINMUX(ULPI_CLK),
#if MOLLY_ON_DALMORE == 0
	/* something that I can't figure out from schematic
	 * requires this on dalmore or else hdmi/hdcp fails
	 */
	UNUSED_PINMUX(ULPI_DATA0),
#endif
	UNUSED_PINMUX(ULPI_DATA1),
	UNUSED_PINMUX(ULPI_DATA2),
	UNUSED_PINMUX(ULPI_DATA3),
	UNUSED_PINMUX(ULPI_DATA4),
	UNUSED_PINMUX(ULPI_DATA5),
	UNUSED_PINMUX(ULPI_DATA6),
	UNUSED_PINMUX(ULPI_DATA7),
	UNUSED_PINMUX(ULPI_DIR),
	UNUSED_PINMUX(ULPI_NXT),
	UNUSED_PINMUX(ULPI_STP),
	UNUSED_PINMUX(CAM_MCLK),
	UNUSED_PINMUX(GPIO_PBB0),
	UNUSED_PINMUX(GPIO_PBB3),
	UNUSED_PINMUX(GPIO_PBB4),
	UNUSED_PINMUX(GPIO_PBB5),
	UNUSED_PINMUX(GPIO_PBB6),
	UNUSED_PINMUX(GPIO_PBB7),
	UNUSED_PINMUX(GPIO_PCC1),
	UNUSED_PINMUX(GPIO_PCC2),
	UNUSED_PINMUX(GMI_AD12),
	UNUSED_PINMUX(GMI_AD13),
	UNUSED_PINMUX(GMI_AD14),
	UNUSED_PINMUX(GMI_AD15),
	UNUSED_PINMUX(GMI_AD8),
	UNUSED_PINMUX(GMI_AD9),
	UNUSED_PINMUX(GMI_ADV_N),
#if MOLLY_ON_DALMORE == 0
	/* Needed for dalmore only. EN_VDDIO_VID for display */
	UNUSED_PINMUX(GMI_CLK),
#endif
	UNUSED_PINMUX(GMI_CS2_N),
	UNUSED_PINMUX(GMI_CS3_N),
	UNUSED_PINMUX(GMI_CS6_N),
	UNUSED_PINMUX(GMI_DQS_P),
	UNUSED_PINMUX(GMI_RST_N),
	UNUSED_PINMUX(GMI_WAIT),
	UNUSED_PINMUX(SDMMC1_WP_N),
	UNUSED_PINMUX(KB_COL2),
	UNUSED_PINMUX(KB_ROW0),
	UNUSED_PINMUX(KB_ROW1),
	UNUSED_PINMUX(KB_ROW10),
#if MOLLY_ON_DALMORE == 0
	/* #if 0 to be removed once we are off of dalmore. for
	 * now, this is our UI_SWITCH on dalmore so this pin
	 * is used.
	 */
	UNUSED_PINMUX(KB_ROW2),
#endif
	UNUSED_PINMUX(KB_ROW3),
	UNUSED_PINMUX(KB_ROW4),
	UNUSED_PINMUX(KB_ROW6),
	UNUSED_PINMUX(KB_ROW7),
	UNUSED_PINMUX(KB_ROW8),
	UNUSED_PINMUX(KB_ROW9),
	UNUSED_PINMUX(SDMMC3_CD_N),
	UNUSED_PINMUX(SYS_CLK_REQ),
	UNUSED_PINMUX(GPIO_PU2),
	UNUSED_PINMUX(GPIO_PU3),
	UNUSED_PINMUX(GPIO_PU4),
	UNUSED_PINMUX(UART2_RXD),
	UNUSED_PINMUX(UART2_TXD),
	UNUSED_PINMUX(OWR),
	UNUSED_PINMUX(SPDIF_OUT),
	UNUSED_PINMUX(USB_VBUS_EN1),
};

static struct gpio_init_pin_info init_gpio_mode_molly_common[] = {
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX4, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX5, true, 0),
#if MOLLY_ON_DALMORE == 1
	/* Remove later when off dalmore, TEMP_ALERT */
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX6, true, 0),
	/* Remove later when off dalmore, WLAN_RESET_N */
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX7, false, 0),
#endif
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PW2, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PW3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX1, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PX3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PP1, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PP2, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PP0, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PP3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PV0, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PV1, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PBB3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PBB5, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PBB6, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PBB7, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PCC1, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PCC2, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PG0, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PG1, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH2, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH4, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH5, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH6, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH7, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PG2, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PG3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PG4, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PH0, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK0, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK1, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PJ0, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK4, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK2, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PI6, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PJ3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PI4, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PI7, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PC7, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PCC5, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PV3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PQ3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PQ5, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PQ6, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PQ7, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PR3, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PR4, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PR5, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PR6, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PR7, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PS0, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PEE1, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU0, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU1, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU2, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU3, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU4, false, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU5, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PU6, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PN7, true, 0),
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PK5, true, 1),

	/* ubik GPIOs */
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PB4, true, 0), /* INT_N, input */
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PB5, false, 0), /* RESET_N, output */
	GPIO_INIT_PIN_MODE(TEGRA_GPIO_PA7, false, 0), /* cs, output */
};
